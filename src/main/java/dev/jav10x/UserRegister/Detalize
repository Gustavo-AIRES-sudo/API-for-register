É importante destacar as anotações do Mapping:
    @GetMapping é responsável por puxar informações;
    @PostMapping é responsável por mandar informações;
    @PutMapping é responsável por alterar informações;
    @PatchMapping também é responsável por alterar informações;
    @DeleteMapping é responsável por deletar a informação;

    //TODO: Criar as informações do usuário: nome, sobrenome, idade e trabalho.
    //TO COMMIT SOMETHING: git commit -m "Rename"

    @Entity: Advinda da JPA, ela transforma toda a classe em uma entidade;
    @Table: Alocação das variáveis em uma tabela;
    @Id: Demonstra ao provedor de persistência a necessidade desse valor ter uma forma única, que no caso, é a variável "ID".
    Isso é necessário para a referenciação de cada linha da tabela. Sem a anotação "@Id" não será possível manipular os dados do banco de dados
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
    "A JPA exige um contrato básico para que uma classe seja considerada uma Entidade Persistente válida:
     -> Deve ser anotada com @Entity.
     ->Deve ter um campo que represente a chave primária, anotado com @Id.

     Se o seu objeto Java não tiver um campo marcado com @Id, o framework não sabe como mapear o objeto para uma linha específica no banco de dados.

     Como o framework saberia qual linha buscar? Ele precisa do ID.
     Como o framework saberia qual linha atualizar? Ele precisa do ID.
     Como o framework saberia qual valor usar como chave estrangeira em outros relacionamentos? Ele precisa do ID.

     O Que Acontece sem o @Id?
        ->Erro de configuração de run time no início da aplicação"

        OTHER VISION
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
    @GeneratedValue: Gera um sequência de valores para o ID, que serve para a manipulação de dados do usuário;